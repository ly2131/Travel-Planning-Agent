{
  "name": "aurite",
  "description": "A new Aurite project: aurite",
  "llms": [
    {
      "llm_id": "my_openai_gpt4_turbo",
      "provider": "openai",
      "model_name": "gpt-4-turbo-preview",
      "temperature": 0.7,
      "default_system_prompt": "You are a helpful AI assistant by OpenAI.",
      "api_key_env_var": "OPENAI_API_KEY"
    },
    {
      "llm_id": "anthropic_claude_3_haiku",
      "provider": "anthropic",
      "model_name": "claude-3-haiku-20240307",
      "temperature": 0.5,
      "default_system_prompt": "You are a helpful AI assistant by Anthropic.",
      "api_key_env_var": "ANTHROPIC_API_KEY"
    },
    {
      "llm_id": "gpt-4.1",
      "provider": "openai",
      "model_name": "gpt-4.1",
      "default_system_prompt": "You are a helpful AI assistant by OpenAI.",
      "api_key_env_var": "OPENAI_API_KEY"
    },
    {
      "llm_id": "openai_gpt35_turbo",
      "provider": "openai",
      "model_name": "gpt-3.5-turbo"
    }
  ],
  "mcp_servers": [
    {
      "name" : "city_price_server",
      "server_path": "Part_I_mcp_servers/city_price_server.py",
      "capabilities": ["tools"],
      "timeout": 15.0
    },
    {
      "name": "ai_fallback_server",
      "server_path": "Part_I_mcp_servers/ai_fallback_server.py",
      "capabilities": ["tools"],
      "timeout": 15.0
    },
    {
      "name": "weather_server",
      "server_path": "Part_I_mcp_servers/weather_server.py",
      "capabilities": ["tools", "prompts"],
      "timeout": 15.0
    },
    {
      "name": "Scrapeless MCP Server",
      "transport_type": "local",
      "command": "npx",
      "args": ["-y", "scrapeless-mcp-server"],
      "capabilities": ["tools"],
      "timeout": 15.0
    }
  ],
  "agents": [
    {
      "name": "City Travel Cost Agent",
      "system_prompt": "你是一个旅游成本助手，使用工具帮助用户查询城市的旅游预算。",
      "mcp_servers" : ["city_price_server","ai_fallback_server"],
      "llm_config_id":" openai_gpt4_turbo"
    },
    {
      "name": "Multi-City Weather Agent",
      "system_prompt": "You are a helpful assistant that receives a JSON object containing a list of cities and metadata. For each city, add a new field called 'weather' with average high, low temperature, and precipitation during the given time period. Do not remove or alter any existing fields. Return only valid JSON. Do not include markdown or text outside JSON.",
      "mcp_servers": [
        "weather_server"
      ],
      "llm_config_id": "openai_gpt35_turbo"
    }
  ],
  "simple_workflows": [
    {
      "name": "Weather Planning Workflow",
      "description": "A simple workflow to plan based on weather data.",
      "steps": ["Weather Agent", "Weather Planning Workflow Step 2"]
    }
  ],
  "custom_workflows": [
    {
      "name": "ExampleCustomWorkflow",
      "module_path": "example_custom_workflows/example_workflow.py",
      "class_name": "ExampleCustomWorkflow",
      "description": "Test workflow using Weather Agent and Weather MCP server."
    }
  ]
}
